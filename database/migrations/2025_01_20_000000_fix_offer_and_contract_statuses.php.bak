<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        // Fix offers table status enum
        try {
            // For PostgreSQL, we need to drop and recreate the column
            if (DB::connection()->getDriverName() === 'pgsql') {
                DB::statement("ALTER TABLE offers DROP CONSTRAINT offers_status_check");
                DB::statement("ALTER TABLE offers ADD CONSTRAINT offers_status_check CHECK (status IN ('pending', 'accepted', 'rejected', 'expired', 'cancelled'))");
            } else {
                // For MySQL, we can use MODIFY
                DB::statement("ALTER TABLE offers MODIFY COLUMN status ENUM('pending', 'accepted', 'rejected', 'expired', 'cancelled') DEFAULT 'pending'");
            }
        } catch (\Exception $e) {
            // If the column doesn't exist or can't be modified, create it
            Schema::table('offers', function (Blueprint $table) {
                if (Schema::hasColumn('offers', 'status')) {
                    $table->dropColumn('status');
                }
                $table->enum('status', ['pending', 'accepted', 'rejected', 'expired', 'cancelled'])->default('pending')->after('requirements');
            });
        }

        // Fix contracts table status enum
        try {
            if (DB::connection()->getDriverName() === 'pgsql') {
                DB::statement("ALTER TABLE contracts DROP CONSTRAINT contracts_status_check");
                DB::statement("ALTER TABLE contracts ADD CONSTRAINT contracts_status_check CHECK (status IN ('pending', 'active', 'completed', 'cancelled', 'disputed', 'payment_failed'))");
            } else {
                DB::statement("ALTER TABLE contracts MODIFY COLUMN status ENUM('pending', 'active', 'completed', 'cancelled', 'disputed', 'payment_failed') DEFAULT 'active'");
            }
        } catch (\Exception $e) {
            Schema::table('contracts', function (Blueprint $table) {
                if (Schema::hasColumn('contracts', 'status')) {
                    $table->dropColumn('status');
                }
                $table->enum('status', ['pending', 'active', 'completed', 'cancelled', 'disputed', 'payment_failed'])->default('active')->after('requirements');
            });
        }

        // Fix contracts workflow_status enum
        try {
            if (DB::connection()->getDriverName() === 'pgsql') {
                DB::statement("ALTER TABLE contracts DROP CONSTRAINT contracts_workflow_status_check");
                DB::statement("ALTER TABLE contracts ADD CONSTRAINT contracts_workflow_status_check CHECK (workflow_status IN ('active', 'waiting_review', 'payment_pending', 'payment_failed', 'payment_available', 'payment_withdrawn', 'terminated'))");
            } else {
                DB::statement("ALTER TABLE contracts MODIFY COLUMN workflow_status ENUM('active', 'waiting_review', 'payment_pending', 'payment_failed', 'payment_available', 'payment_withdrawn', 'terminated') DEFAULT 'active'");
            }
        } catch (\Exception $e) {
            Schema::table('contracts', function (Blueprint $table) {
                if (Schema::hasColumn('contracts', 'workflow_status')) {
                    $table->dropColumn('workflow_status');
                }
                $table->enum('workflow_status', ['active', 'waiting_review', 'payment_pending', 'payment_failed', 'payment_available', 'payment_withdrawn', 'terminated'])->default('active')->after('status');
            });
        }
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        // Revert offers table status enum
        try {
            if (DB::connection()->getDriverName() === 'pgsql') {
                DB::statement("ALTER TABLE offers DROP CONSTRAINT offers_status_check");
                DB::statement("ALTER TABLE offers ADD CONSTRAINT offers_status_check CHECK (status IN ('pending', 'accepted', 'rejected', 'expired'))");
            } else {
                DB::statement("ALTER TABLE offers MODIFY COLUMN status ENUM('pending', 'accepted', 'rejected', 'expired') DEFAULT 'pending'");
            }
        } catch (\Exception $e) {
            // Ignore errors on rollback
        }

        // Revert contracts table status enum
        try {
            if (DB::connection()->getDriverName() === 'pgsql') {
                DB::statement("ALTER TABLE contracts DROP CONSTRAINT contracts_status_check");
                DB::statement("ALTER TABLE contracts ADD CONSTRAINT contracts_status_check CHECK (status IN ('active', 'completed', 'cancelled', 'disputed'))");
            } else {
                DB::statement("ALTER TABLE contracts MODIFY COLUMN status ENUM('active', 'completed', 'cancelled', 'disputed') DEFAULT 'active'");
            }
        } catch (\Exception $e) {
            // Ignore errors on rollback
        }

        // Revert contracts workflow_status enum
        try {
            if (DB::connection()->getDriverName() === 'pgsql') {
                DB::statement("ALTER TABLE contracts DROP CONSTRAINT contracts_workflow_status_check");
                DB::statement("ALTER TABLE contracts ADD CONSTRAINT contracts_workflow_status_check CHECK (workflow_status IN ('active', 'waiting_review', 'payment_available', 'payment_withdrawn', 'terminated'))");
            } else {
                DB::statement("ALTER TABLE contracts MODIFY COLUMN workflow_status ENUM('active', 'waiting_review', 'payment_available', 'payment_withdrawn', 'terminated') DEFAULT 'active'");
            }
        } catch (\Exception $e) {
            // Ignore errors on rollback
        }
    }
}; 